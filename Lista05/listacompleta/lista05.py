# -*- coding: utf-8 -*-
"""Lista05.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1mmjsEfIgYbHYUdamn2rloRmoieSwB6MR
"""

# Disciplina: Probabilidade e Estatística
# Aluno: Thiago Gonçalves Milanez Alves
# Matrícula: 20114290004
# Lista 05

#EX01
'''#Fazendo a importação para utilização da função GMEAN
from scipy.stats.mstats import gmean
#Fazendo a importação do Statistics para untilização das funções
import statistics
#Preenchendo a lista com os dados de consumo fornecidos
consumo = [7, 8, 9, 10, 11, 13, 13, 17]
#Utilizando a função MEAN para para exibir a Média aritmética simples
print('Média aritmética simples: ', statistics.mean(consumo))
#Utilizando a função HARMONIC_MEAN para para exibir a Média Harmônica
print('Média Harmônica: ', statistics.harmonic_mean(consumo))
#Utilizando a função GMEAN para para exibir a Média Geometrica
print('Média Geométrica: ', gmean(consumo))
#Utilizando a função MODE para para exibir a MODA
print('Moda: ', statistics.mode(consumo))
#Utilizando a função VARIANCE para para exibir a Variância
print('Variância: ',statistics.variance(consumo))
#Utilizando a função STDEV para para exibir o Desvio Padrão
print('Desvio Padrão: ',statistics.stdev(consumo))'''

#EX02
'''#Fazendo a importação para utilização da função GMEAN
from scipy.stats.mstats import gmean
#Fazendo a importação do Statistics para untilização das funções
import statistics
#Preenchendo a lista com os dados de escala fornecidos
escala = [63, 67, 72, 75, 77, 77, 78, 80, 81]
#Utilizando a função MEAN para para exibir a Média aritmética simples
print('Méria aritmética simples: ', statistics.mean(escala))
#Utilizando a função HARMONIC_MEAN para para exibir a Média Harmônica
print('Média Harmônica: ', statistics.harmonic_mean(escala))
#Utilizando a função GMEAN para para exibir a Média Geometrica
print('Média Geométrica: ', gmean(escala))
#Utilizando a função MODE para para exibir a MODA
print('Moda: ', statistics.mode(escala))
#Utilizando a função MEDIAN para para exibir o Mediana
print('Mediana: ', statistics.median(escala))
#Utilizando a função VARIANCE para para exibir a Variância
print('Variância: ',statistics.variance(escala))
#Utilizando a função STDEV para para exibir o Desvio Padrão
print('Desvio Padrão: ',statistics.stdev(escala))'''

#EX03
'''#Fazendo a importação do Statistics para untilização das funções
import statistics
#Preenchendo a lista com os dados de kg fornecidos
kg = [4.0, 4.5, 5.0, 5.0, 5.5, 6.0, 6.0, 6.5, 6.5, 6.5, 6.5, 7.0, 7.0, 7.0, 7.0, 7.0, 7.5, 8.5, 9.0, 9.0, 9.0, 9.5, 10.0, 10.0, 10.5, 11.0, 12.0, 12.5, 13.0, 13.0]
#Utilizando a função STDEV e MEAN para para exibir o Coeficiente de Variância
print('Coeficente de variância: ', (statistics.stdev(kg) / statistics.mean(kg)) * 100)'''

#EX04
'''#Fazendo a importação do Statistics para untilização das funções
import statistics
#Preenchendo a lista com os dados de toneladas fornecidos
tonelada = [12, 12, 14, 15, 17, 18, 18, 22, 23, 29]
#Utilizando a função MEAN para para exibir a Média aritmética simples
print('Méria aritmética simples: ', statistics.mean(tonelada))
#Utilizando a função MEDIAN para para exibir o Mediana
print('Mediana: ', statistics.median(tonelada))
#Utilizando a função STDEV para para exibir o Desvio Padrão
print('Desvio Padrão: ',statistics.stdev(tonelada))'''

#EX05
'''#Fazendo a importação para utilização da função GMEAN
from scipy.stats.mstats import gmean
#Fazendo a importação do Statistics para untilização das funções
import statistics
#Iniciando a lista vazia
lista = []
#Iniciando a variavel nota com tipo inteiro
nota = int
#Condição WHILE para rodar o programa até que o código de saída seja digitado
while (nota != (-999)):
  #Recebe a nota do aluno 
  nota = int (input('Entre com a nota do aluno: '))
  #Condição para verificar se a nota digitada está entre 0 e 10
  if (nota < 0 or nota > 10):
    #Condição para finalizar o programa
    if (nota == (-999)):
      print('Programa encerrado')
    #Se a nota inserida for menor que 0 e maior que 10 exibe a mensagem de erro  
    else:
      print('Nota inválida')
  #Se a nota estiver correta e não for o código de saída a nota é inserida na lista
  else:
    lista.append(nota)
else:
  #Lista é organizada na ordem crescente
  lista.sort()
  #Utilizando a função MEAN para para exibir a Média aritmética simples
  print('Méria aritmética simples: ', statistics.mean(lista))
  #Utilizando a função HARMONIC_MEAN para para exibir a Média Harmônica
  print('Média Harmônica: ', statistics.harmonic_mean(lista))
  #Utilizando a função GMEAN para para exibir a Média Geometrica
  print('Média Geométrica: ', gmean(lista))
  #Utilizando a função MODE para para exibir a MODA
  print('Moda: ', statistics.mode(lista))
  #Utilizando a função VARIANCE para para exibir a Variância
  print('Variância: ',statistics.variance(lista))
  #Utilizando a função STDEV para para exibir o Desvio Padrão
  print('Desvio Padrão: ',statistics.stdev(lista))
  #Utilizando a função STDEV e MEAN para para exibir o Coeficiente de Variância
  print('Coeficente de variância: ', (statistics.stdev(lista) / statistics.mean(lista)) * 100)'''

#EX06
'''#Recebendo as 3 notas
nota1 = int(input('Entre com a primeira nota: '))
nota2 = int(input('Entre com a segunda nota: '))
nota3 = int(input('Entre com a terceira nota: '))

#Fazendo a Média Ponderada
media_ponderada = (nota1 * 3 + nota2 * 4 + nota3 * 3) / (3 + 4 + 3)

#Validando se as notas digitadas estão dentro do intervalo de 0 a 10
if (nota1 < 0 or nota1 > 10):
  print('Nota 1 inválida')
elif (nota2 < 0 or nota2 > 10):
  print('Nota 2 inválida')
elif (nota3 < 0 or nota3 > 10):
  print('Nota 3 inválida')
else:
  #Exibindo a média ponderada
  print('Média ponderada do aluno: ', media_ponderada)'''